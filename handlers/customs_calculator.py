import logging
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

from .common import start

logger = logging.getLogger(__name__)

(ASK_PRICE, ASK_ENGINE, ASK_AGE) = range(2, 5)


async def customs_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–†–æ–∑–ø–æ—á–Ω–µ–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫.\n"
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ –≤ —î–≤—Ä–æ (‚Ç¨):",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASK_PRICE


async def ask_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        price = float(update.message.text.strip())
        context.user_data['price'] = price
        await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –æ–±'—î–º –¥–≤–∏–≥—É–Ω–∞ (–≤ –∫—É–±—ñ—á–Ω–∏—Ö —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1998):")
        return ASK_ENGINE
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ.")
        return ASK_PRICE


async def ask_engine(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        engine_size = int(update.message.text.strip())
        context.user_data['engine_size'] = engine_size
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π –≤—ñ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è (–≤ —Ä–æ–∫–∞—Ö):")
        return ASK_AGE
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –¥–ª—è –æ–±'—î–º—É –¥–≤–∏–≥—É–Ω–∞.")
        return ASK_ENGINE


async def calculate_customs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        age = int(update.message.text.strip())

        MAX_AGE_LIMIT = 115
        if not (0 <= age <= MAX_AGE_LIMIT):
            await update.message.reply_text(
                f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞: –í—ñ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –º–∞—î –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 0 –¥–æ {MAX_AGE_LIMIT} —Ä–æ–∫—ñ–≤.\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ —â–µ —Ä–∞–∑."
            )
            return ASK_AGE

        price = context.user_data['price']
        engine_size = context.user_data['engine_size']

        import_duty = price * 0.10
        base_rate = 50 if engine_size <= 3000 else 100
        age_coeff = min(age, 15) if age > 0 else 1
        excise_tax = base_rate * (engine_size / 1000) * age_coeff
        vat = (price + import_duty + excise_tax) * 0.20
        total_payment = import_duty + excise_tax + vat

        result_text = (
            f"--- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É ---\n\n"
            f"–í–∫–∞–∑–∞–Ω—ñ –¥–∞–Ω—ñ:\n"
            f"  - –í–∞—Ä—Ç—ñ—Å—Ç—å: {price:,.2f} ‚Ç¨\n"
            f"  - –û–±'—î–º –¥–≤–∏–≥—É–Ω–∞: {engine_size} —Å–º¬≥\n"
            f"  - –í—ñ–∫: {age} —Ä–æ–∫—ñ–≤\n\n"
            f"–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–ª–∞—Ç–µ–∂—ñ–≤:\n"
            f"  - –í–≤—ñ–∑–Ω–µ –º–∏—Ç–æ: {import_duty:,.2f} ‚Ç¨\n"
            f"  - –ê–∫—Ü–∏–∑–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫: {excise_tax:,.2f} ‚Ç¨\n"
            f"  - –ü–î–í: {vat:,.2f} ‚Ç¨\n\n"
            f"----------------------------------------\n"
            f"üí∞ **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –º–∏—Ç–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤: {total_payment:,.2f} ‚Ç¨**\n"
            f"üöó **–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ –∑ —Ä–æ–∑–º–∏—Ç–Ω–µ–Ω–Ω—è–º: {price + total_payment:,.2f} ‚Ç¨**"
        )
        await update.message.reply_text(result_text, parse_mode='Markdown')

    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ —É –≤–∏–≥–ª—è–¥—ñ —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5).")
        return ASK_AGE

    except KeyError:
        await update.message.reply_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –¥–∞–Ω—ñ –±—É–ª–∏ –≤—Ç—Ä–∞—á–µ–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /start.")
        context.user_data.clear()
        return ConversationHandler.END

    context.user_data.clear()
    return await start(update, context)