from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
import logging

import services.vision_analyzer
from services.vision_analyzer import analyze_car_damage
from .common import start

logger = logging.getLogger(__name__)

REPAIR_PHOTO = 1

async def repair_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ä–µ–º–æ–Ω—Ç—É."""
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Ü—ñ–Ω–∫–∏ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ä–µ–º–æ–Ω—Ç—É.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return REPAIR_PHOTO

async def repair_photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ê–Ω–∞–ª—ñ–∑—É—é —Ñ–æ—Ç–æ, –∑–∞—á–µ–∫–∞–π—Ç–µ... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω–∏.")

    try:
        photo_file = await update.message.photo[-1].get_file()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –≤ –ø–∞–º'—è—Ç—å —É –≤–∏–≥–ª—è–¥—ñ –±–∞–π—Ç—ñ–≤
        photo_bytes = await photo_file.download_as_bytearray()

        analysis_result = analyze_car_damage(image_bytes=bytes(photo_bytes))

        if not analysis_result or "error" in analysis_result:
            error_message = analysis_result.get("error", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.") if analysis_result else "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."
            await update.message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {error_message}")
        else:
            min_cost = analysis_result.get('estimated_cost_min', 0)
            max_cost = analysis_result.get('estimated_cost_max', 0)
            description = analysis_result.get('damage_description', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.')
            brand = analysis_result.get('car_brand', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.')
            currency = analysis_result.get('currency', 'UAH')
            model_name = analysis_result.get('model_used', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.')

            response_text = (
                f"**–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Ü—ñ–Ω–∫–∏:**\n\n"
                f"**–ú–æ–¥–µ–ª—å —Ç–∞ –º–∞—Ä–∫–∞:**\n{brand}\n"
                f"üîç **–í–∏—è–≤–ª–µ–Ω—ñ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è:**\n_{description}_\n\n"
                f"üí∞ **–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç—É:**\n"
                f"–í—ñ–¥ **{min_cost:,}** –¥–æ **{max_cost:,} {currency}**.\n\n"
                f"_–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞._\n\n\n\n"
                f"–ù–∞–∑–≤–∞ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞, —è–∫–∏–π –Ω–∞–¥–∞–≤ –≤–∞–º –ø–æ—Å–ª—É–≥—É –∞–Ω–∞–ª—ñ–∑—É:\n{model_name}.\n\n**"
            )
            await update.message.reply_text(response_text, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    return await start(update, context)